[tool.ruff]
fix = true
show-fixes = true
target-version = "py313"

[tool.ruff.format]
docstring-code-format = true
preview = true

[tool.ruff.lint]
ignore = [
  "D203",   # 1 blank line required before class docstring
  "D212",   # Multi-line docstring summary should start at the second line
  "COM812", # Trailing comma missing
  "ISC001", # Implicitly concatenated string literals on one line
]
preview = true
select = [
  "A",     # flake8-builtins
  "AIR",   # Airflow
  "ANN",   # flake8-annotations
  "ARG",   # flake8-unused-arguments
  "ASYNC", # flake8-async
  "B",     # flake8-bugbear
  "BLE",   # flake8-blind-except
  "C4",    # flake8-comprehensions
  "C90",   # McCabe cyclomatic complexity
  "COM",   # flake8-commas
  # "CPY",   # flake8-copyright
  "D",     # pydocstyle
  "DJ",    # flake8-django
  # "DOC",   # pydoclint
  "DTZ",   # flake8-datetimez
  "E",     # pycodestyle errors
  "EM",    # flake8-errmsg
  "ERA",   # eradicate
  "EXE",   # flake8-executable
  "F",     # Pyflakes
  "FA",    # flake8-future-annotations
  "FAST",  # FastAPI
  "FBT",   # flake8-boolean-trap
  "FIX",   # flake8-fixme
  "FLY",   # flynt
  "FURB",  # refurb
  "G",     # flake8-logging-format
  "I",     # isort
  "ICN",   # flake8-import-conventions
  "INP",   # flake8-no-pep420
  "INT",   # flake8-gettext
  "ISC",   # flake8-implicit-str-concat
  "LOG",   # flake8-logging
  "N",     # pep8-naming
  "NPY",   # NumPy-specific rules
  "PD",    # pandas-vet
  "PERF",  # Perflint
  "PGH",   # pygrep-hooks
  "PIE",   # flake8-pie
  "PLC",   # Pylint Convention
  "PLE",   # Pylint Error
  "PLR",   # Pylint Refactor
  "PLW",   # Pylint Warning
  # "PT",    # flake8-pytest-style
  "PTH",   # flake8-use-pathlib
  "PYI",   # flake8-pyi
  "Q",     # flake8-quotes
  "RET",   # flake8-return
  "RSE",   # flake8-raise
  "RUF",   # Ruff-specific rules
  "S",     # flake8-bandit
  "SIM",   # flake8-simplify
  "SLF",   # flake8-self
  "SLOT",  # flake8-slots
  "T10",   # flake8-debugger
  "T20",   # flake8-print
  "TC",    # flake8-type-checking
  "TD",    # flake8-todos
  "TID",   # flake8-tidy-imports
  "TRY",   # tryceratops
  "UP",    # pyupgrade
  "W",     # pycodestyle warnings
  "YTT",   # flake8-2020
]

[tool.ruff.lint.per-file-ignores]
"*/migrations/*.py" = [
  "D",    # pydocstyle
  "RUF",  # Ruff-specific rules
]
"djangoqueries/urls.py" = [
  "D411", # no-blank-line-before-section
  "D413", # missing-blank-line-after-last-section
]
"manage.py" = [
  "ANN",  # flake8-annotations
  "EM",   # flake8-errmsg
  "TRY",  # tryceratops
  "PL",   # Pylint
]

[tool.ruff.lint.isort]
known-first-party = [
  "blog",
  "djangoqueries",
  "shows",
]
known-third-party = [
  "django",
]

[tool.coverage.html]
title = "Django Queries - Coverage"

[tool.coverage.report]
fail_under = 100
show_missing = true

[tool.coverage.run]
branch = true
concurrency = [ "multiprocessing" ]
data_file = ".coverages/.coverage"
disable_warnings = [ "no-data-collected" ]
omit = [
  ".venv/*",
  "djangoqueries/asgi.py",
  "djangoqueries/workers.py",
  "djangoqueries/wsgi.py",
  "manage*.py",
  "venv/*",
]
source = [ "." ]

[tool.bandit]
exclude_dirs = [ ".venv", "tests" ]
